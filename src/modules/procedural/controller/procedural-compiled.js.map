{"version":3,"sources":["procedural.js"],"names":[],"mappings":";;;AAGA;;AAEA,QAAQ,MAAR,CAAe,kBAAf,EAAmC,CAAC,SAAD,CAAnC,EACG,MADH,CACU,CAAC,gBAAD,EAAmB,UAAS,cAAT,EAAyB;AAClD,iBAAe,IAAf,CAAoB,aAApB,EAAmC;AACjC,iBAAa,4CAAb;AACA,gBAAY,gBAAZ;GAFF,EADkD;CAAzB,CAD7B,EAOG,UAPH,CAOc,gBAPd,EAOgC,CAAC,QAAD,EAAW,UAAC,MAAD,EAAY;AACnD,MAAM,YAAY,EAAZ,CAD6C;AAEnD,MAAM,kBAAkB,EAAlB,CAF6C;AAGnD,MAAM,aAAa,YAAY,eAAZ,CAHgC;AAInD,MAAM,SAAS,SAAS,cAAT,CAAwB,UAAxB,CAAT,CAJ6C;AAKnD,MAAM,MAAM,OAAO,UAAP,CAAkB,IAAlB,CAAN,CAL6C;;AAOnD,MAAI,MAAJ,CAAW,KAAX,GAAmB,UAAnB,CAPmD;AAQnD,MAAI,MAAJ,CAAW,MAAX,GAAoB,UAApB,CARmD;;AAUnD,SAAO,GAAP,CAAW,oBAAX,EAAiC,YAAU;AACzC,aAAS,UAAT,EAAqB,eAArB,EADyC;AAEzC,YAAQ,UAAW,SAAX,EAAsB,SAAtB,CAAR,EAFyC;GAAV,CAAjC,CAVmD;;AAenD,WAAS,SAAT,CAAoB,IAApB,EAA0B,IAA1B,EAAgC;AAC9B,QAAI,MAAM,EAAN,CAD0B;AAE9B,SAAM,IAAI,IAAE,CAAF,EAAK,IAAI,IAAJ,EAAU,GAAzB,EAA+B;AAC7B,UAAI,IAAJ,CAAS,EAAT,EAD6B;AAE7B,UAAI,CAAJ,EAAO,IAAP,CAAa,IAAI,KAAJ,CAAU,IAAV,CAAb,EAF6B;AAG7B,WAAM,IAAI,IAAE,CAAF,EAAK,IAAI,IAAJ,EAAU,GAAzB,EAA+B;AAC7B,YAAI,CAAJ,EAAO,CAAP,IAAY,sBAAsB,CAAtB,EAAwB,CAAxB,CAAZ,CAD6B;OAA/B;KAHF;AAOA,WAAO,GAAP,CAT8B;GAAhC,CAfmD;;AA2BnD,WAAS,QAAT,CAAmB,IAAnB,EAAyB,UAAzB,EAAqC;AACnC,SAAK,IAAI,IAAE,CAAF,EAAK,KAAK,IAAL,EAAW,IAAI,IAAI,UAAJ,EAAe;AAC1C,UAAI,MAAJ,CAAW,CAAX,EAAa,CAAb,EAD0C;AAE1C,UAAI,MAAJ,CAAW,CAAX,EAAa,IAAb,EAF0C;AAG1C,UAAI,MAAJ,CAAW,CAAX,EAAa,CAAb,EAH0C;AAI1C,UAAI,MAAJ,CAAW,IAAX,EAAgB,CAAhB,EAJ0C;KAA5C;AAMA,QAAI,MAAJ,GAPmC;GAArC,CA3BmD;;AAqCnD,WAAS,QAAT,CAAkB,CAAlB,EAAqB,CAArB,EAAwB;AACtB,QAAI,SAAJ,GAAgB,sBAAhB,CADsB;AAEtB,QAAI,QAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,eAApB,EAAqC,eAArC,EAFsB;GAAxB;;AAKA,WAAS,OAAT,CAAiB,QAAjB,EAA2B;AACzB,SAAK,IAAI,CAAJ,IAAS,QAAd,EAAwB;AACtB,WAAI,IAAI,CAAJ,IAAS,SAAS,CAAT,CAAb,EAA0B;AACxB,YAAI,SAAS,CAAT,EAAY,CAAZ,MAAmB,CAAnB,EAAsB;AACxB,mBAAS,IAAI,EAAJ,EAAQ,IAAI,EAAJ,CAAjB,CADwB;SAA1B,CADwB;OAA1B;KADF;GADF;;AAUA,WAAS,qBAAT,CAA+B,GAA/B,EAAmC,GAAnC,EAAwC;AACtC,WAAO,KAAK,KAAL,CAAW,KAAK,MAAL,MAAe,MAAI,GAAJ,GAAQ,CAAR,CAAf,GAA0B,GAA1B,CAAlB,CADsC;GAAxC;CApDuC,CAP3C","file":"procedural-compiled.js","sourcesContent":["/**\n * Created by vincent on 11.04.16.\n */\n'use strict';\n\nangular.module('myApp.procedural', ['ngRoute'])\n  .config(['$routeProvider', function($routeProvider) {\n    $routeProvider.when('/procedural', {\n      templateUrl: 'modules/procedural/partial/procedural.html',\n      controller: 'proceduralCtrl'\n    });\n  }])\n  .controller('proceduralCtrl', ['$scope', ($scope) => {\n    const boardSize = 20;\n    const boardResolution = 20;\n    const canvasSize = boardSize * boardResolution;\n    const canvas = document.getElementById('tutorial');\n    const ctx = canvas.getContext('2d');\n\n    ctx.canvas.width = canvasSize;\n    ctx.canvas.height = canvasSize;\n\n    $scope.$on('$viewContentLoaded', function(){\n      drawGrid(canvasSize, boardResolution);\n      drawMap(createMap( boardSize, boardSize));\n    });\n\n    function createMap( rows, cols) {\n      let arr = [];\n      for ( let i=0; i < rows; i++ ) {\n        arr.push([]);\n        arr[i].push( new Array(cols) );\n        for ( let j=0; j < cols; j++ ) {\n          arr[i][j] = randomIntFromInterval(0,1);\n        }\n      }\n      return arr;\n    };\n\n    function drawGrid( size, resolution) {\n      for (let i=0; i <= size; i = i + resolution){\n        ctx.moveTo(i,0);\n        ctx.lineTo(i,size);\n        ctx.moveTo(0,i);\n        ctx.lineTo(size,i);\n      }\n      ctx.stroke();\n    };\n\n    function drawArea(x, y) {\n      ctx.fillStyle = \"rgba(0, 0, 200, 0.5)\";\n      ctx.fillRect (x, y, boardResolution, boardResolution);\n    }\n\n    function drawMap(mapArray) {\n      for (let i in mapArray) {\n        for(let j in mapArray[i]) {\n          if (mapArray[i][j] === 1) {\n            drawArea(i * 20, j * 20);\n          };\n        }\n      }\n    }\n\n    function randomIntFromInterval(min,max) {\n      return Math.floor(Math.random()*(max-min+1)+min);\n    }\n  }]);"]}